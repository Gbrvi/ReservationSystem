@using Reservation.ViewModel
@model RoomDetailViewModel

<div class="container">
    <h1 class="my-4">
        Sala @Model.Room.RoomNumber
        ID @Model.Room.RoomId
        <small>Detalhes</small>
    </h1>

    <div class="row"> <!-- Carousel das imagens de cada Sala -->
        <div class="col-md-8">
            <div id="carouselRoomImages" class="carousel slide" data-bs-ride="carousel" data-bs-interval="2500">
                <ol class="carousel-indicators"><!--Define os indicadores para cada imagem em baixo do carousel -->
                    @for (int i = 0; i < Model.Room.PhotoAlbum.Count; i++)
                    {
                        <li data-bs-target="#carouselRoomImages" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                    }
                </ol>
                <div class="carousel-inner"><!-- Transforma as fotos para um estado visível e as mostra com um carousel -->
                    @if (Model.Room.PhotoAlbum.Any())
                    {
                        @for (int i = 0; i < Model.Room.PhotoAlbum.Count; i++)
                        {
                            <div class="carousel-item @(i == 0 ? "active" : "")">
                                @{
                                    var base64 = Convert.ToBase64String(Model.Room.PhotoAlbum[i].ImageData);
                                    var imgsrc = $"data:image/jpeg;base64,{base64}";
                                }
                                <img class="d-block w-100" src="@imgsrc" alt="Imagem da sala">
                            </div>
                        }
                    }
                    else
                    {
                        <div class="carousel-item active"><!-- Se nenhuma foto estiver existir carrega este placeholder -->
                            <img class="d-block w-100" src="https://via.placeholder.com/800x400" alt="No image available">
                        </div>
                    }
                </div>
                <a class="carousel-control-prev" href="#carouselRoomImages" role="button" data-bs-slide="prev"><!-- Ícone de Previous do carousel -->
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="sr-only"></span>
                </a>
                <a class="carousel-control-next" href="#carouselRoomImages" role="button" data-bs-slide="next"><!-- Ícone de Next do carousel -->
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="sr-only"></span>
                </a>


            </div>
        </div>

        <div class="col-md-4">
            <h3 class="my-3">Informações da Sala</h3>
            <p>Preço: @Model.Room.RoomPrice</p>
            <p>Tipo: @Model.Room.RoomType</p>
            <h3 class="my-3">Características</h3>
            <ul>
                <li>Status: @Model.Room.RoomStatus</li>
                <li>Capacidade: @Model.Room.Capacity</li>
                <li>Internet: @(Model.Room.HasInternet ? "Sim" : "Não")</li>
                <li>Ar Condicionado: @(Model.Room.HasAirConditioning ? "Sim" : "Não")</li>
                <li>Câmera de Segurança: @(Model.Room.HasSecurityCamera ? "Sim" : "Não")</li>
                <li>Tamanho: @Model.Room.SizeInSquareMeters m²</li>

                

            </ul>
            <a asp-controller="Reserve" asp-action="Create" asp-route-id="@Model.Room.RoomId">Reservar</a>


            

        </div>
    </div>
</div>


<!-- Formulário de reserva -->
<h3 class="my-3">Fazer Reserva</h3>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

<form asp-action="Create" asp-controller="Reserve" method="post">
    <input type="hidden" asp-for="CreateReserveViewModel.RoomId" value="@Model.Room.RoomId" />
    <input type="hidden" asp-for="CreateReserveViewModel.UserId"  />
    



    
    <div>
        <label for="ReserveDate">Data da Reserva:</label>
        <input type="date" asp-for="CreateReserveViewModel.ReserveDate" class="form-control" onkeydown="return false;" min="@DateTime.Now.ToString("yyyy-MM-dd")" required />

        <span asp-validation-for="CreateReserveViewModel.ReserveDate" class="text-danger"></span>
    </div>

    
    <div>
        <label for="ReserveStart">Hora de Início:</label>
        <input type="time" id="ReserveStart" asp-for="CreateReserveViewModel.ReserveStart" value="08:00"  class="form-control"required />
        <span asp-validation-for="CreateReserveViewModel.ReserveStart" class="text-danger"></span>
    </div>

    
    <div>
        <label for="ReserveEnd">Hora de Término:</label>
        <input type="time" id="ReserveEnd" asp-for="CreateReserveViewModel.ReserveEnd" value="09:00" class="form-control" required />
        <span asp-validation-for="CreateReserveViewModel.ReserveEnd" class="text-danger"></span>
    </div>

    <div>
        <label for="ReserveStatus">Status da Reserva:</label>
        <input type="text"  asp-for="CreateReserveViewModel.ReserveStatus" class="form-control" required />
        <span asp-validation-for="CreateReserveViewModel.ReserveStatus" class="text-danger"></span>
    </div>

    <div>
        <label for="RentPrice">Preço do Aluguel:</label>
        <input type="number" id="RentPrice" step="0.01" value="@Model.Room.RoomPrice" asp-for="CreateReserveViewModel.RentPrice" class="form-control" required readonly />
        <span asp-validation-for="CreateReserveViewModel.RentPrice" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Reservar Sala</button>
</form>



@section Scripts {

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
      

    }
}



     @*Tentei limitar as opções do time apenas para os horarios disponiveis
        Nao ta dando certo. Gerei codigo aqui para caso usuario coloque qualquer horario DIFERENTE de 08 e 20 ele vai colocar um valor padrão.... Dps olhamos isso
     *@
    @*  <script>
    // Função para ajustar o horário se estiver fora do intervalo permitido
    function adjustTime(input, minTime, maxTime) {
        const value = input.value;
        if (!value) return; // Se o campo estiver vazio, não faz nada

        const [hours, minutes] = value.split(":").map(Number);
        const timeInMinutes = hours * 60 + minutes;

        const [minHours, minMinutes] = minTime.split(":").map(Number);
        const minTimeInMinutes = minHours * 60 + minMinutes;

        const [maxHours, maxMinutes] = maxTime.split(":").map(Number);
        const maxTimeInMinutes = maxHours * 60 + maxMinutes;

        if (timeInMinutes < minTimeInMinutes) {
            input.value = minTime; // Ajusta para o mínimo permitido
        } else if (timeInMinutes > maxTimeInMinutes) {
            input.value = maxTime; // Ajusta para o máximo permitido
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        const reserveStart = document.getElementById("ReserveStart");
        const reserveEnd = document.getElementById("ReserveEnd");

        // Valores padrão para horários permitidos
        const minTimeStandard = "08:00";
        const maxTimeStandard = "09:00";

        // Ajusta o horário automaticamente ao sair do campo
        reserveStart.addEventListener("change", function () {
            adjustTime(reserveStart, minTimeStandard, maxTimeStandard);
        });

        reserveEnd.addEventListener("change", function () {
            adjustTime(reserveEnd, minTimeStandard, maxTimeStandard);
        });
    }); *@
 
    </script>